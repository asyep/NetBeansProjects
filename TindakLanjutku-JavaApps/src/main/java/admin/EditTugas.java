    /*
    * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
    * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
    */
    package admin;
    import com.mycompany.tindaklanjutku.Koneksi;
    import admin.tugas;
    import java.sql.Statement;
    import java.sql.Connection;
    import java.sql.PreparedStatement;
    import java.sql.ResultSet;
    import java.sql.SQLException;
    import java.util.Date;
    import javax.swing.JOptionPane;


    /**
     *
     * @author ASUS VIVO
     */
    public class EditTugas extends javax.swing.JFrame {

        private final String username;
        public EditTugas(int idTugas, String username) {
            this.username = username;
            this.idTugas = idTugas;
            initComponents();
            loadTugasData(); // Memuat data tugas berdasarkan ID
            setLocationRelativeTo(null); // Tampil di tengah layar
        }
    private final int idTugas;

        private void loadTugasData() {
            try (Connection conn = Koneksi.configDB();
                PreparedStatement pstmt = conn.prepareStatement(
                    "SELECT judul, deskripsi, deadline, k.nama_kategori " +
                    "FROM tugas t JOIN kategori k ON t.id_kategori = k.id_kategori " +
                    "WHERE t.id_tugas = ?")) {

                pstmt.setInt(1, idTugas);
                ResultSet rs = pstmt.executeQuery();

                if (rs.next()) {
                    judulField.setText(rs.getString("judul"));
                    deskripsiField.setText(rs.getString("deskripsi"));
                    dateDeadline.setDate(rs.getDate("deadline"));
                    kategori1.setText(rs.getString("nama_kategori"));
                }
            } catch (SQLException e) {
                e.printStackTrace();
                JOptionPane.showMessageDialog(this, "Gagal memuat data tugas: " + e.getMessage());
            }
        }







        /**
         * This method is called from within the constructor to initialize the form.
         * WARNING: Do NOT modify this code. The content of this method is always
         * regenerated by the Form Editor.
         */
        @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Edit Tugas Admin");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 587, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 617, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

        private void roundedButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_roundedButton3ActionPerformed
            String judul = judulField.getText();
            String deskripsi = deskripsiField.getText();
            Date deadline = dateDeadline.getDate();
            String kategoriStr = kategori1.getText().trim();

            if (judul.isEmpty() || deskripsi.isEmpty() || deadline == null || kategoriStr.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Semua field harus diisi!");
                return;
            }

            Connection conn = null;
            try {
                conn = Koneksi.configDB();
                conn.setAutoCommit(false); // Mulai transaksi

                // Cek kategori
                String cekKategori = "SELECT id_kategori FROM kategori WHERE nama_kategori = ?";
                PreparedStatement cekStmt = conn.prepareStatement(cekKategori);
                cekStmt.setString(1, kategoriStr);
                ResultSet rs = cekStmt.executeQuery();

                int idKategori;
                if (rs.next()) {
                    idKategori = rs.getInt("id_kategori");
                } else {
                    String insertKategori = "INSERT INTO kategori (nama_kategori) VALUES (?)";
                    PreparedStatement insertStmt = conn.prepareStatement(insertKategori, Statement.RETURN_GENERATED_KEYS);
                    insertStmt.setString(1, kategoriStr);
                    insertStmt.executeUpdate();
                    
                    ResultSet generatedKeys = insertStmt.getGeneratedKeys();
                    if (generatedKeys.next()) {
                        idKategori = generatedKeys.getInt(1);
                    } else {
                        throw new SQLException("Gagal mengambil ID kategori baru.");
                    }
                }

                // Update tugas
                String updateSql = "UPDATE tugas SET judul = ?, deskripsi = ?, deadline = ?, id_kategori = ? WHERE id_tugas = ?";
                PreparedStatement updateStmt = conn.prepareStatement(updateSql);
                updateStmt.setString(1, judul);
                updateStmt.setString(2, deskripsi);
                updateStmt.setDate(3, new java.sql.Date(deadline.getTime()));
                updateStmt.setInt(4, idKategori);
                updateStmt.setInt(5, idTugas);

                int rows = updateStmt.executeUpdate();
                if (rows > 0) {
                    conn.commit();
                    JOptionPane.showMessageDialog(this, "Tugas berhasil diperbarui!");
                    new admin.tugas(username).setVisible(true);
                    dispose();
                } else {
                    JOptionPane.showMessageDialog(this, "Gagal memperbarui tugas!");
                    conn.rollback();
                }
            } catch (SQLException e) {
                e.printStackTrace();
                try {
                    if (conn != null) conn.rollback();
                } catch (SQLException ex) {
                    ex.printStackTrace();
                }
                JOptionPane.showMessageDialog(this, "Error: " + e.getMessage());
            } finally {
                try {
                    if (conn != null) conn.close();
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
    }//GEN-LAST:event_roundedButton3ActionPerformed

        /**
         * @param args the command line arguments
         */
        public static void main(String args[]) {
            /* Set the Nimbus look and feel */
            //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
            /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
            * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
            */
            try {
                for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                    if ("Nimbus".equals(info.getName())) {
                        javax.swing.UIManager.setLookAndFeel(info.getClassName());
                        break;
                    }
                }
            } catch (ClassNotFoundException ex) {
                java.util.logging.Logger.getLogger(EditTugas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
            } catch (InstantiationException ex) {
                java.util.logging.Logger.getLogger(EditTugas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
            } catch (IllegalAccessException ex) {
                java.util.logging.Logger.getLogger(EditTugas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
            } catch (javax.swing.UnsupportedLookAndFeelException ex) {
                java.util.logging.Logger.getLogger(EditTugas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
            }
            //</editor-fold>

            /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                // Gunakan ID dummy untuk testing

            }
        });
        }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    }
